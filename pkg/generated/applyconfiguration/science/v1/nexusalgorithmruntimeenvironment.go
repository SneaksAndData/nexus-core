/*
Copyright 2024-2026 ECCO Data & AI Open-Source Project Maintainers.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// NexusAlgorithmRuntimeEnvironmentApplyConfiguration represents a declarative configuration of the NexusAlgorithmRuntimeEnvironment type for use
// with apply.
type NexusAlgorithmRuntimeEnvironmentApplyConfiguration struct {
	EnvironmentVariables       []corev1.EnvVar        `json:"environmentVariables,omitempty"`
	MappedEnvironmentVariables []corev1.EnvFromSource `json:"mappedEnvironmentVariables,omitempty"`
	Annotations                map[string]string      `json:"annotations,omitempty"`
	DeadlineSeconds            *int32                 `json:"deadlineSeconds,omitempty"`
	MaximumRetries             *int32                 `json:"maximumRetries,omitempty"`
}

// NexusAlgorithmRuntimeEnvironmentApplyConfiguration constructs a declarative configuration of the NexusAlgorithmRuntimeEnvironment type for use with
// apply.
func NexusAlgorithmRuntimeEnvironment() *NexusAlgorithmRuntimeEnvironmentApplyConfiguration {
	return &NexusAlgorithmRuntimeEnvironmentApplyConfiguration{}
}

// WithEnvironmentVariables adds the given value to the EnvironmentVariables field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EnvironmentVariables field.
func (b *NexusAlgorithmRuntimeEnvironmentApplyConfiguration) WithEnvironmentVariables(values ...corev1.EnvVar) *NexusAlgorithmRuntimeEnvironmentApplyConfiguration {
	for i := range values {
		b.EnvironmentVariables = append(b.EnvironmentVariables, values[i])
	}
	return b
}

// WithMappedEnvironmentVariables adds the given value to the MappedEnvironmentVariables field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MappedEnvironmentVariables field.
func (b *NexusAlgorithmRuntimeEnvironmentApplyConfiguration) WithMappedEnvironmentVariables(values ...corev1.EnvFromSource) *NexusAlgorithmRuntimeEnvironmentApplyConfiguration {
	for i := range values {
		b.MappedEnvironmentVariables = append(b.MappedEnvironmentVariables, values[i])
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *NexusAlgorithmRuntimeEnvironmentApplyConfiguration) WithAnnotations(entries map[string]string) *NexusAlgorithmRuntimeEnvironmentApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithDeadlineSeconds sets the DeadlineSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeadlineSeconds field is set to the value of the last call.
func (b *NexusAlgorithmRuntimeEnvironmentApplyConfiguration) WithDeadlineSeconds(value int32) *NexusAlgorithmRuntimeEnvironmentApplyConfiguration {
	b.DeadlineSeconds = &value
	return b
}

// WithMaximumRetries sets the MaximumRetries field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaximumRetries field is set to the value of the last call.
func (b *NexusAlgorithmRuntimeEnvironmentApplyConfiguration) WithMaximumRetries(value int32) *NexusAlgorithmRuntimeEnvironmentApplyConfiguration {
	b.MaximumRetries = &value
	return b
}
