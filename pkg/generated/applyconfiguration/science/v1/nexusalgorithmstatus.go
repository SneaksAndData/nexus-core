/*
Copyright 2024-2026 ECCO Data & AI Open-Source Project Maintainers.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// NexusAlgorithmStatusApplyConfiguration represents a declarative configuration of the NexusAlgorithmStatus type for use
// with apply.
type NexusAlgorithmStatusApplyConfiguration struct {
	SyncedSecrets        []string                             `json:"syncedSecrets,omitempty"`
	SyncedConfigurations []string                             `json:"syncedConfigurations,omitempty"`
	SyncedToClusters     []string                             `json:"syncedToClusters,omitempty"`
	Conditions           []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// NexusAlgorithmStatusApplyConfiguration constructs a declarative configuration of the NexusAlgorithmStatus type for use with
// apply.
func NexusAlgorithmStatus() *NexusAlgorithmStatusApplyConfiguration {
	return &NexusAlgorithmStatusApplyConfiguration{}
}

// WithSyncedSecrets adds the given value to the SyncedSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SyncedSecrets field.
func (b *NexusAlgorithmStatusApplyConfiguration) WithSyncedSecrets(values ...string) *NexusAlgorithmStatusApplyConfiguration {
	for i := range values {
		b.SyncedSecrets = append(b.SyncedSecrets, values[i])
	}
	return b
}

// WithSyncedConfigurations adds the given value to the SyncedConfigurations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SyncedConfigurations field.
func (b *NexusAlgorithmStatusApplyConfiguration) WithSyncedConfigurations(values ...string) *NexusAlgorithmStatusApplyConfiguration {
	for i := range values {
		b.SyncedConfigurations = append(b.SyncedConfigurations, values[i])
	}
	return b
}

// WithSyncedToClusters adds the given value to the SyncedToClusters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SyncedToClusters field.
func (b *NexusAlgorithmStatusApplyConfiguration) WithSyncedToClusters(values ...string) *NexusAlgorithmStatusApplyConfiguration {
	for i := range values {
		b.SyncedToClusters = append(b.SyncedToClusters, values[i])
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *NexusAlgorithmStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *NexusAlgorithmStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
