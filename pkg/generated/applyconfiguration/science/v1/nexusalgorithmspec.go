/*
Copyright 2024-2026 ECCO Data & AI Open-Source Project Maintainers.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// NexusAlgorithmSpecApplyConfiguration represents a declarative configuration of the NexusAlgorithmSpec type for use
// with apply.
type NexusAlgorithmSpecApplyConfiguration struct {
	Container                  *NexusAlgorithmContainerApplyConfiguration          `json:"container,omitempty"`
	ComputeResources           *NexusAlgorithmResourcesApplyConfiguration          `json:"computeResources,omitempty"`
	WorkgroupRef               *NexusAlgorithmWorkgroupRefApplyConfiguration       `json:"workgroupRef,omitempty"`
	Command                    *string                                             `json:"command,omitempty"`
	Args                       []string                                            `json:"args,omitempty"`
	RuntimeEnvironment         *NexusAlgorithmRuntimeEnvironmentApplyConfiguration `json:"runtimeEnvironment,omitempty"`
	ErrorHandlingBehaviour     *NexusErrorHandlingBehaviourApplyConfiguration      `json:"errorHandlingBehaviour,omitempty"`
	DatadogIntegrationSettings *NexusDatadogIntegrationSettingsApplyConfiguration  `json:"datadogIntegrationSettings,omitempty"`
}

// NexusAlgorithmSpecApplyConfiguration constructs a declarative configuration of the NexusAlgorithmSpec type for use with
// apply.
func NexusAlgorithmSpec() *NexusAlgorithmSpecApplyConfiguration {
	return &NexusAlgorithmSpecApplyConfiguration{}
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *NexusAlgorithmSpecApplyConfiguration) WithContainer(value *NexusAlgorithmContainerApplyConfiguration) *NexusAlgorithmSpecApplyConfiguration {
	b.Container = value
	return b
}

// WithComputeResources sets the ComputeResources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ComputeResources field is set to the value of the last call.
func (b *NexusAlgorithmSpecApplyConfiguration) WithComputeResources(value *NexusAlgorithmResourcesApplyConfiguration) *NexusAlgorithmSpecApplyConfiguration {
	b.ComputeResources = value
	return b
}

// WithWorkgroupRef sets the WorkgroupRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WorkgroupRef field is set to the value of the last call.
func (b *NexusAlgorithmSpecApplyConfiguration) WithWorkgroupRef(value *NexusAlgorithmWorkgroupRefApplyConfiguration) *NexusAlgorithmSpecApplyConfiguration {
	b.WorkgroupRef = value
	return b
}

// WithCommand sets the Command field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Command field is set to the value of the last call.
func (b *NexusAlgorithmSpecApplyConfiguration) WithCommand(value string) *NexusAlgorithmSpecApplyConfiguration {
	b.Command = &value
	return b
}

// WithArgs adds the given value to the Args field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Args field.
func (b *NexusAlgorithmSpecApplyConfiguration) WithArgs(values ...string) *NexusAlgorithmSpecApplyConfiguration {
	for i := range values {
		b.Args = append(b.Args, values[i])
	}
	return b
}

// WithRuntimeEnvironment sets the RuntimeEnvironment field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RuntimeEnvironment field is set to the value of the last call.
func (b *NexusAlgorithmSpecApplyConfiguration) WithRuntimeEnvironment(value *NexusAlgorithmRuntimeEnvironmentApplyConfiguration) *NexusAlgorithmSpecApplyConfiguration {
	b.RuntimeEnvironment = value
	return b
}

// WithErrorHandlingBehaviour sets the ErrorHandlingBehaviour field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ErrorHandlingBehaviour field is set to the value of the last call.
func (b *NexusAlgorithmSpecApplyConfiguration) WithErrorHandlingBehaviour(value *NexusErrorHandlingBehaviourApplyConfiguration) *NexusAlgorithmSpecApplyConfiguration {
	b.ErrorHandlingBehaviour = value
	return b
}

// WithDatadogIntegrationSettings sets the DatadogIntegrationSettings field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DatadogIntegrationSettings field is set to the value of the last call.
func (b *NexusAlgorithmSpecApplyConfiguration) WithDatadogIntegrationSettings(value *NexusDatadogIntegrationSettingsApplyConfiguration) *NexusAlgorithmSpecApplyConfiguration {
	b.DatadogIntegrationSettings = value
	return b
}
