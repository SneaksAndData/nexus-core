/*
Copyright 2024-2026 ECCO Data & AI Open-Source Project Maintainers.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// NexusAlgorithmWorkgroupSpecApplyConfiguration represents a declarative configuration of the NexusAlgorithmWorkgroupSpec type for use
// with apply.
type NexusAlgorithmWorkgroupSpecApplyConfiguration struct {
	Description  *string             `json:"description,omitempty"`
	Capabilities map[string]bool     `json:"capabilities,omitempty"`
	Cluster      *string             `json:"cluster,omitempty"`
	Tolerations  []corev1.Toleration `json:"tolerations,omitempty"`
	Affinity     *corev1.Affinity    `json:"affinity,omitempty"`
}

// NexusAlgorithmWorkgroupSpecApplyConfiguration constructs a declarative configuration of the NexusAlgorithmWorkgroupSpec type for use with
// apply.
func NexusAlgorithmWorkgroupSpec() *NexusAlgorithmWorkgroupSpecApplyConfiguration {
	return &NexusAlgorithmWorkgroupSpecApplyConfiguration{}
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *NexusAlgorithmWorkgroupSpecApplyConfiguration) WithDescription(value string) *NexusAlgorithmWorkgroupSpecApplyConfiguration {
	b.Description = &value
	return b
}

// WithCapabilities puts the entries into the Capabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Capabilities field,
// overwriting an existing map entries in Capabilities field with the same key.
func (b *NexusAlgorithmWorkgroupSpecApplyConfiguration) WithCapabilities(entries map[string]bool) *NexusAlgorithmWorkgroupSpecApplyConfiguration {
	if b.Capabilities == nil && len(entries) > 0 {
		b.Capabilities = make(map[string]bool, len(entries))
	}
	for k, v := range entries {
		b.Capabilities[k] = v
	}
	return b
}

// WithCluster sets the Cluster field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cluster field is set to the value of the last call.
func (b *NexusAlgorithmWorkgroupSpecApplyConfiguration) WithCluster(value string) *NexusAlgorithmWorkgroupSpecApplyConfiguration {
	b.Cluster = &value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *NexusAlgorithmWorkgroupSpecApplyConfiguration) WithTolerations(values ...corev1.Toleration) *NexusAlgorithmWorkgroupSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *NexusAlgorithmWorkgroupSpecApplyConfiguration) WithAffinity(value corev1.Affinity) *NexusAlgorithmWorkgroupSpecApplyConfiguration {
	b.Affinity = &value
	return b
}
